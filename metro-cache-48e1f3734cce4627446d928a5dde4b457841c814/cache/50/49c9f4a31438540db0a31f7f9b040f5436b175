__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/aidan/Documents/SpotUrSpot/App.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _reactNativeMaps = require(_dependencyMap[3], "react-native-maps");

  var _reactNativeMaps2 = _interopRequireDefault(_reactNativeMaps);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PolygonCreator: {
      displayName: "PolygonCreator"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/aidan/Documents/SpotUrSpot/App.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width,
      height = _Dimensions$get.height;

  var ASPECT_RATIO = width / height;
  var LATITUDE = 37.78825;
  var LONGITUDE = -122.4324;
  var LATITUDE_DELTA = 0.0922;
  var LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;
  var id = 0;

  var PolygonCreator = _wrapComponent("PolygonCreator")(function (_React$Component) {
    _inherits(PolygonCreator, _React$Component);

    function PolygonCreator(props) {
      _classCallCheck(this, PolygonCreator);

      var _this = _possibleConstructorReturn(this, (PolygonCreator.__proto__ || Object.getPrototypeOf(PolygonCreator)).call(this, props));

      _this.ds = new _reactNative.ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
          return r1 !== r2;
        }
      });
      _this.playlistNames = [];
      _this.playlistData = {};
      _this.state = {
        region: {
          latitude: LATITUDE,
          longitude: LONGITUDE,
          latitudeDelta: LATITUDE_DELTA,
          longitudeDelta: LONGITUDE_DELTA
        },
        polygons: [],
        editing: null,
        creatingHole: false,
        mapView: true,
        selectedID: null,
        dataSource: _this.ds.cloneWithRows(_this.playlistNames)
      };
      return _this;
    }

    _createClass(PolygonCreator, [{
      key: "finish",
      value: function finish() {
        var _state = this.state,
            polygons = _state.polygons,
            editing = _state.editing;
        this.setState({
          polygons: [].concat(_toConsumableArray(polygons), [editing]),
          editing: null,
          creatingHole: false
        });
      }
    }, {
      key: "createHole",
      value: function createHole() {
        var _state2 = this.state,
            editing = _state2.editing,
            creatingHole = _state2.creatingHole;

        if (!creatingHole) {
          this.setState({
            creatingHole: true,
            editing: _extends({}, editing, {
              holes: [].concat(_toConsumableArray(editing.holes), [[]])
            })
          });
        } else {
          var holes = [].concat(_toConsumableArray(editing.holes));

          if (holes[holes.length - 1].length === 0) {
            holes.pop();
            this.setState({
              editing: _extends({}, editing, {
                holes: holes
              })
            });
          }

          this.setState({
            creatingHole: false
          });
        }
      }
    }, {
      key: "pressRow",
      value: function pressRow(rowData) {
        var url = "";

        for (var i = 0; i < this.playlistData.items.length; i++) {
          if (this.playlistData.items[i].name == rowData) {
            url = this.playlistData.items[i].external_urls.spotify;
          }
        }

        fetch('http://172.16.22.71:4040/api/spots/', {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            spotID: this.state.selectedID.toString(),
            playlistURL: url
          })
        });
        this.setState({
          mapView: true
        });
      }
    }, {
      key: "chooseMusic",
      value: function chooseMusic(id) {
        var _this2 = this;

        fetch('http://172.16.22.71:4040/api/playlists/', {
          method: "GET"
        }).then(function (response) {
          return response.json();
        }).then(function (responseJson) {
          _this2.playlistData = responseJson;

          for (var i = 0; i < responseJson.items.length; i++) {
            _this2.playlistNames.push(responseJson.items[i].name);
          }

          _this2.setState({
            dataSource: _this2.ds.cloneWithRows(_this2.playlistNames)
          });

          _this2.setState({
            selectedID: id
          });

          _this2.setState({
            mapView: false
          });
        }).catch(function (err) {
          console.log("fuck");
        });
      }
    }, {
      key: "onPress",
      value: function onPress(e) {
        var _state3 = this.state,
            editing = _state3.editing,
            creatingHole = _state3.creatingHole;

        if (!editing) {
          this.setState({
            editing: {
              id: id++,
              coordinates: [e.nativeEvent.coordinate],
              holes: []
            }
          });
        } else if (!creatingHole) {
          this.setState({
            editing: _extends({}, editing, {
              coordinates: [].concat(_toConsumableArray(editing.coordinates), [e.nativeEvent.coordinate])
            })
          });
        } else {
          var holes = [].concat(_toConsumableArray(editing.holes));
          holes[holes.length - 1] = [].concat(_toConsumableArray(holes[holes.length - 1]), [e.nativeEvent.coordinate]);
          this.setState({
            editing: _extends({}, editing, {
              id: id++,
              coordinates: [].concat(_toConsumableArray(editing.coordinates)),
              holes: holes
            })
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var mapOptions = {
          scrollEnabled: true
        };

        if (this.state.editing) {
          mapOptions.scrollEnabled = false;

          mapOptions.onPanDrag = function (e) {
            return _this3.onPress(e);
          };
        }

        if (this.state.mapView) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: styles.container,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 170
              }
            },
            _react3.default.createElement(
              _reactNativeMaps2.default,
              _extends({
                provider: this.props.provider,
                style: styles.map,
                initialRegion: this.state.region,
                onPress: function onPress(e) {
                  return _this3.onPress(e);
                }
              }, mapOptions, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 171
                }
              }),
              this.state.polygons.map(function (polygon) {
                return _react3.default.createElement(_reactNativeMaps.Polygon, {
                  key: polygon.id,
                  coordinates: polygon.coordinates,
                  holes: polygon.holes,
                  strokeColor: "#F00",
                  fillColor: "rgba(255,0,0,0.5)",
                  strokeWidth: 1,
                  tappable: true,
                  onPress: function onPress() {
                    return _this3.chooseMusic(polygon.id);
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 179
                  }
                });
              }),
              this.state.editing && _react3.default.createElement(_reactNativeMaps.Polygon, {
                key: this.state.editing.id,
                coordinates: this.state.editing.coordinates,
                holes: this.state.editing.holes,
                strokeColor: "#000",
                fillColor: "rgba(255,0,0,0.5)",
                strokeWidth: 1,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 191
                }
              })
            ),
            _react3.default.createElement(
              _reactNative.View,
              {
                style: styles.buttonContainer,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 201
                }
              },
              this.state.editing && _react3.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  onPress: function onPress() {
                    return _this3.createHole();
                  },
                  style: [styles.bubble, styles.button],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 203
                  }
                },
                _react3.default.createElement(
                  _reactNative.Text,
                  {
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 207
                    }
                  },
                  this.state.creatingHole ? 'Finish Hole' : 'Create Hole'
                )
              ),
              this.state.editing && _react3.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  onPress: function onPress() {
                    return _this3.finish();
                  },
                  style: [styles.bubble, styles.button],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 211
                  }
                },
                _react3.default.createElement(
                  _reactNative.Text,
                  {
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 215
                    }
                  },
                  "Finish"
                )
              )
            )
          );
        } else {
          return _react3.default.createElement(_reactNative.ListView, {
            style: styles.listContainer,
            dataSource: this.state.dataSource,
            renderRow: function renderRow(rowData) {
              return _react3.default.createElement(
                _reactNative.TouchableHighlight,
                {
                  underlayColor: "#E9F7FD",
                  onPress: function onPress() {
                    return _this3.pressRow(rowData);
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 229
                  }
                },
                _react3.default.createElement(
                  _reactNative.View,
                  {
                    style: styles.listRowContainer,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 230
                    }
                  },
                  _react3.default.createElement(
                    _reactNative.Text,
                    {
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 231
                      }
                    },
                    rowData
                  )
                )
              );
            },
            renderSeparator: function renderSeparator(sectionId, rowId) {
              return _react3.default.createElement(_reactNative.View, {
                key: rowId,
                style: styles.separator,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 237
                }
              });
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 225
            }
          });
        }
      }
    }]);

    return PolygonCreator;
  }(_react3.default.Component));

  PolygonCreator.propTypes = {
    provider: _reactNativeMaps.ProviderPropType
  };

  var styles = _reactNative.StyleSheet.create({
    container: _extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      justifyContent: 'flex-end',
      alignItems: 'center'
    }),
    map: _extends({}, _reactNative.StyleSheet.absoluteFillObject),
    bubble: {
      backgroundColor: 'rgba(255,255,255,0.7)',
      paddingHorizontal: 18,
      paddingVertical: 12,
      borderRadius: 20
    },
    latlng: {
      width: 200,
      alignItems: 'stretch'
    },
    button: {
      width: 80,
      paddingHorizontal: 12,
      alignItems: 'center',
      marginHorizontal: 10
    },
    buttonContainer: {
      flexDirection: 'row',
      marginVertical: 20,
      backgroundColor: 'transparent'
    },
    listContainer: {
      flex: 1,
      marginTop: 30
    },
    listRowContainer: {
      flex: 1,
      padding: 16,
      flexDirection: 'row',
      alignItems: 'center'
    },
    separator: {
      flex: 1,
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: '#8E8E8E'
    },
    text: {
      marginLeft: 12,
      fontSize: 24
    }
  });

  exports.default = PolygonCreator;
});